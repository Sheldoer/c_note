单链表结构体
typedef struct Lnode {
	int data;
	struct Lnode* next;
}Lnode, * Linklist;
建立单链表
Lnode* L = (Linklist)malloc(sizeof(Lnode));
	Lnode* p = L;
	int num[] = { 1,-3,4,-8,6,7,-2};
	int len = sizeof(num) / sizeof(int);
	for (int i = 0; i < len; i++)
	{
		Lnode* r = (Linklist)malloc(sizeof(Lnode));
		r->data = num[i];
		p->next = r;
		p = r;
	}
	p->next = NULL;
二叉树结构体
typedef struct BtNode {
	int data;
	int size;
	struct BtNode* lchild, * rchild;
}BtNode, * BiTree;
建立二叉树
#define Max 20
int num[Max];
for (int i = 0; i < Max; i++)
	num[i] = i;
BiTree T;
Creattree(T, num, 0,Max);

void Creattree(BiTree& T, int A[], int n, int len) {
	if (n >=len)
		T = NULL;
	else {
		T = (BiTree)malloc(sizeof(BtNode));
		T->data = A[n];
		Creattree(T->lchild, A, 2 * n + 1, len);
		Creattree(T->rchild, A, 2 * n + 2, len);
	}
}
栈
#define Max 50
typedef struct {
	int data[Max];
	int top;
}Sqstack;
void Initstack(Sqstack& s) {
	s.top = -1;
}
bool Stackempty(Sqstack s) {
	if (s.top == -1)
		return true;
	else
		return false;
}
bool Push(Sqstack& s, int x)
{
	if (s.top == Max - 1)
		return false;
	s.data[++s.top] = x;
	return false;
}
bool Pop(Sqstack& s, int& x)
{
	if (s.top == -1)
		return false;
	x = s.data[s.top--];
	return true;
}
bool Gettop(Sqstack s, int x) {
	if (s.top == -1)
		return false;
	x = s.data[s.top];
	return true;
}
队列
#define Max 50
typedef struct {
	int data[Max];
	int front, rear;
}SqQueue;
void InitQueue(SqQueue& q)
{
	q.rear =q.front = 0;
}
bool EnQueue(SqQueue& q, int x) {
	if ((q.rear + 1) % Max == q.front)return false;
	q.data[q.rear] = x;
	q.rear = (q.rear + 1) % Max;
	return true;
}
bool DeQueue(SqQueue& q, int& x) {
	if (q.rear == q.front)return false;
	x = q.data[q.front];
	q.front = (q.front + 1) % Max;
	return true;
}